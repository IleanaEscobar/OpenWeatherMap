
'use strict';
const req = require('request');
const moment = require('moment');
const queryString = require('query-string');

class OpenWeather {
    /* This function creates an OpenWeather object after taking an API key
    * @class OpenWeather
    * @param {String} apiKey This is your apiKey generated by Google.
    */
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.loc = '';
        this.query = {}
        this.exclude = "&exclude=";
        this.units = "&units=";
        this.lang = "&lang="
    }
    /* This function is used to search for a specific location.
    * @param {String} city This is a specific city.
    * @return {OpenWeather} this Returns the object itself to allow for chaining dot operators.
    */
    location(city) {

        !city ? null : this.loc = city;
        return this;
    }
    /* This function is used to set time units. It is currently not in use.
    * @param {String} val This is a specific unit  of time.
    * @return {OpenWeather} this Returns the object itself to allow for chaining dot operators.
    */
    time(val) {
        !val ? this.time = 'hourly/1hour' : this.time = val;
        return this;
    }

    /* This function establishes which language the user wants the output to be in.
    * @param {String} lan This is a specific language written in 2 letter shorthand.
    * @return {OpenWeather} this Returns the object itself to allow for chaining dot operators.
    */
    language(lan) {
        // String indicating the language in which to return the resource.
        // Default value set to en-us.

        !lan ? null : this.lang += lan;
        return this;
    }

    /* This function establishes whether the output should exclude minutes or not.
    * @param {Boolean} bool Either true or false.
    * @return {OpenWeather} this Returns the object itself to allow for chaining dot operators.
    */
    excludeMin(bool) {
        !bool ? null : this.exclude += "minutely,";
        return this;
    }

    /* This function establishes whether the output should exclude hours or not.
    * @param {Boolean} bool Either true or false.
    * @return {OpenWeather} this Returns the object itself to allow for chaining dot operators.
    */
    excludeHour(bool) {
        !bool ? null : this.exclude += "hourly,";
        return this;
    }

    /* This function establishes whether the output should exclude Days or not.
    * @param {Boolean} bool Either true or false.
    * @return {OpenWeather} this Returns the object itself to allow for chaining dot operators.
    */
    excludeDay(bool) {
        !bool ? null : this.exclude += "daily,";
        return this;
    }

    /* This function establishes if the output should follow metric units.
    * @param {Boolean} bool Either true or false.
    * @return {OpenWeather} this Returns the object itself to allow for chaining dot operators.
    */
    metric(bool) {
        !bool ? null : this.units += "metric";
        return this;
    }

    /* This function establishes if the output should follow imperial units.
    * @param {Boolean} bool Either true or false.
    * @return {OpenWeather} this Returns the object itself to allow for chaining dot operators.
    */
    imperial(bool) {
        !bool ? null : this.units += "imperial";
        return this;
    }

    /* This function specifies whether or not to include the full JSON object in the API output.
    * @param {Boolean} bool Either true or false. Defaults to false.
    * @return {OpenWeather} this Returns the object itself to allow for chaining dot operators.
    */
    details(bool) {
        !bool ? null : this.query.details = bool;
        return this;
    }

    /* This function generates the request URL.
    */
    generateReqUrl() {
            this.url = `https://api.openweathermap.org/data/2.5/weather?q=${this.loc}&appid=${this.apiKey}${this.units}${this.lang}`;
            this.query ? this.url += `&${queryString.stringify(this.query)}` : this.url;
        
    }

    /* This function creates and completes the get request, using Promise to deal with the HTTP request.
    * @return {JSON or Error} (no identifier) Returns the output of the request.
    */
    get() {
        return new Promise((resolve, reject) => {
            this.generateReqUrl();
            req({ url: this.url, json: true }, (err, res, body) => {
                err ? reject(`Forecast cannot be retrieved. ERROR: ${err}`) : null;
                res.statusCode !== 200 ? reject(`Forecast cannot be retrieved. Response: ${res.statusCode} ${res.statusMessage}`) : null;
                resolve(body)
            })
        })
    }
}
module.exports = OpenWeather;
